
   Arrayis a collection of data type
   
Array syntax 

    dataType[] var_nam = new dataType[size];

eg 

   int[] rollno = new int[5];

         or 

   int[] rollno = {1,3,4,5,6};
 --------
     |
     V
 
 1)  this data type represt what is the type of data stored inside the array.

 2)  All the type of data in the array same



  int[] rollno;  -  declaration of array. roll no is getting defined in the stack.  at compile time.
  
  rollno = new int[5]; - initiallization: actually here object  is created in the heap memory  at run time.


                  int[] rollno = new int[5]; 
                  ------------      ------------
                      |             |
                      V              -- >    creating the object in the heap memory.runtime(dynamic memory allocation)
                    compile time
                  

dynamic memory allocation
------------------------
      At the run time memory will be allocated
    
   rollno - reference variable


new - new is used to create an  new object

Continuous of array
--------------------
 ->  In c and c++ array is  continuous  memory allocation

 ->   In java it depends on jvm whether it is continuous or not.

proof

1) Array objects are in heap.
2) Heap objects are not Continues.
3) dynamic memory allocation .

 hence array object in java may not be continuous  depends on JVM

Index of an array
-----------------
    -------------------------
    | 11 | 22 | 33 | 44 | 55 |
    -------------------------
     0      1    2    3    4

print(arr[0])   // 11
print(arr[4])   // 55

int arr[] = new int [5];

[0,0,0,0,0]

 the default value of array is 0

print(arr[3])     // 0
  

String array
------------

 String arr[] = new arr[5];

   [null , null , null ,null ,null]

null

->null is a special literal (value) . its a default value
  
-> it does not assign to any primitive . it is only for non primitive


String s= null;

int a = null;   // error
                                 _____________
|         |                     /             \
|         |                    /               \
|         |                   /                 \    collection of reference variable pointing to null
|   arr --|--------------->  /    [_ ,_,_,_,_]   \
|         |                 /                     \
___________                /                       \
  
-> arr is  referencw variable pointting to  array obj in heap memory . 


Array input
------------

import java.util.*;

public class Main  {
    public static void main(String[] args) {
  Scanner s = new Scanner(System.in);
  int arr[]= new int[5];
  for(int i=0;i<arr.length;i++)
  {
      arr[i]=s.nextInt();
  }
  for(int i=0;i<arr.length;i++)
  {
      System.out.println(arr[i]);
  }
 }
}
           
 for each loop
---------------

for(int i:arr)                 // for each element in the array print the element
  {
      System.out.println(i);     // here i represents element of an array
  }


toString() method
------------

 System.out.println(Arrays.toString(arr));

output 
[2, 3, 4, 5, 6]



String str[] = {"aa","bb","cc","dd","ee"}

                                 ______________________
|         |                     /                      \
|         |                    /                        \
|         |                   /                          \    
|   arr --|--------------->  /     [* , * , * , *  ,* ]   \
|         |                 /       |   |   |   |   |      \
___________                /        |   |   |   |   |       \
                                    v   |   v   |   v
                                    aa  |  cc   |   ee
                                        v       v
                                       bb       dd





modify the array
----------------

import java.util.*;

public class Main  {
    public static void main(String[] args) {
  Scanner s = new Scanner(System.in);
  String[] str = new String[5];
  for(int i=0;i<str.length;i++)
  {
      str[i]=s.next();
  }
  System.out.println(Arrays.toString(str));

  str[2]="oo";
  
  System.out.println(Arrays.toString(str));
    }
}

output

aa bb cc dd ee
[aa, bb, cc, dd, ee]
[aa, bb, oo, dd, ee]
-------------------------------------------------------------------------------------------------------

methods changing the value in array
---------------------------------


import  java.util.*;
public class Main {
    public static void main(String[] args)
    {
     Scanner s = new Scanner(System.in);
     int arr[] = new int[5];
     for(int i=0;i<arr.length;i++)
     {
         arr[i]=s.nextInt();

      }
        System.out.println(Arrays.toString(arr));
        change(arr);
        System.out.println(Arrays.toString(arr));
    }
    static void change(int r[])
    {
         r[0]=99;
    }
}

output
-------
1 2 3 4 5
[1, 2, 3, 4, 5]
[99, 2, 3, 4, 5]

                                                  1 change t0 99  

       arr   -------------------------------->   [1, 2, 3, 4, 5]

                                                  ^
                                                  |
       r -----------------------------------------|       arr[0]= 99

               
              mutuable behaviours

 
-> mutuable means you can change the object

-> Strings are immutable . arrays are mutubale.






two dimensional array
--------------------

  
syntax 

  int[][] arr =new int [3][];
                        |
                        |
                        V
                       row size is mandatory.
       
           or
  
int [][] arr = {{1,2,3}
                {4,5,6}
                {7,8,9}}
          

                                 ______________________
|         |                     /                      \
|         |                    /   0        1      2    \
|         |                   /                          \    
|   arr --|--------------->  /  [ |__| ,  |__| ,  |__| ]  \
|         |                 /       |       |       |      \
___________                /        |       |       |       \
                                    |      [4,5,6]  |
                                [1,2,3]            [7,8,9]




         arr[1] --->   [4,5,6]
         arr[1][0]-------> 4



array input and output
----------------------


import  java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);

        int[][] arr = new int[3][3];
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                arr[i][j] = s.nextInt();
            }
        }
        for (int i = 0; i < arr.length; i++)
	 {
            for (int j = 0; j < arr[i].length; j++) 
	    {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println("");
        }
    }
}
output
1 2 3 4 5 6 7 8 9

1 2 3 
4 5 6 
7 8 9

using toString method to print
--------------------------------

  for (int i = 0; i < arr.length; i++)
  {
      System.out.println(Arrays.toString(arr[i]));
   }

output
-------
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]



for each loop in two dimensional
---------------------------------

 for (int[] i:arr)
  {
    System.out.println(Arrays.toString(i));
  }
output 
-------
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]
----------------------------------------------------------------------------------------------------------------------------------------------------

Array list
----------

  syntax

 ArrayList<Integer>  list = new ArrayList<>();
            |
            V
          wrapper class not a primitive.


import java.util.*;
public class Main {
    public static void main(String[] args) {
        ArrayList<Integer> list= new ArrayList<>();
        list.add(5);
        list.add(55);
        list.add(666);
        list.add(21);
        list.add(11);
        list.add(211);
        System.out.println(list);             //[5, 55, 666, 21, 11, 211]
        list.set(0,99);// used for update
        System.out.println(list);             //[99, 55, 666, 21, 11, 211]
        list.remove(5);
        System.out.println(list);             //[99, 55, 666, 21, 11]
        System.out.println(list.contains(99));  // true
    }
}



import java.util.*;
public class Main {
    public static void main(String[] args) {
        ArrayList<Integer> list= new ArrayList<>();
        Scanner s = new Scanner(System.in);
         for(int i=0;i<5;i++)
         {
             list.add(s.nextInt());
         }
         for(int i=0;i<5;i++)
         {
             System.out.println(list.get(i));    // if we cannot get list[2] it will give error  
         }


    }
}

1)  size is fixed internally.
2)  Say arraylist fills by some amount
-> it will create  a new array list  of say , double the size
-> old element copied in the new one
->  Old one is deleted

if an array[2,3,4]  array if full

if  you add another element   it will double the size and copy into it [2,4,3,7,.,.,.]  and remove the old one.


MULTI DIMENSIONAL ARRAY LIST
----------------------------

import java.util.*;
public class Main {
    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);

        ArrayList<ArrayList<Integer>> list = new ArrayList<>();          //[]
        for(int i=0;i<3;i++)
        {
            list.add(new ArrayList<>());
        }
        System.out.println(list);                      //[[], [], []]

        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                list.get(i).add(s.nextInt());             
            }
        }

        System.out.println(list);             //       [[2, 3, 4], [5, 6, 7], [8, 9, 0]]


    }
}


questions
----------

1 >   swapping elements in an array
------------------------------------

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int arr[]= {11,22,33,444,55};
        swap(arr,0,4);
        System.out.println(Arrays.toString(arr));        //[55, 22, 33, 444, 11]
    }
    static void swap(int[] arr,int i1,int i2)
    {
        int temp= arr[i1];
        arr[i1]= arr[i2];
        arr[i2]=temp;
    }
}

2)  maximum element in an array
-----------------------------------

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int arr[]= {11,22,33,444,55};

        System.out.println(max(arr));                       //444

        System.out.println(maxrange(arr,0,2));              //33
    }

    static  int max(int[] arr)
    {
        if(arr.length==0)
        {
            return -1;
        }
        int maxi = arr[0];
        for(int i=1;i<5;i++)
        {
            if(maxi<arr[i])
            {
                maxi=arr[i];
            }
        }
        return maxi;
    }
    static  int maxrange(int[] arr,int start, int end)             // finding with in the range
    {
        if(start>end)
        {
            return -1;
        }
        if(arr.length==0)
        {
            return -1;
        }
        int maxi = arr[0];
        for(int i=start;i<=end;i++)
        {
            if(maxi<arr[i])
            {
                maxi=arr[i];
            }
        }
        return maxi;
    }
}



3)  reversing an array 
   ---------------------

   [ 2, 3 ,4 ,5 , 6]
     |            |
     |            |
     ---> swap <---
  
   [ 6, 3 ,4 ,5 , 2]
        |     |
        |     |
       -> swap <-
  
   [ 6, 5 ,4 ,3 , 2]



import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int arr[]= {11,22,33,444,55};

        revese(arr);

        System.out.println(Arrays.toString(arr));
    }
    static void revese(int[] arr)
    {
       int  start=0;
        int end=arr.length-1;
        while (start<end)
        {
            swap(arr,start,end);
            start++;
            end--;
        }
    }

    static void swap(int[] arr,int i1,int i2)
    {
        int temp= arr[i1];
        arr[i1]= arr[i2];
        arr[i2]=temp;
    }
}

output
------

[55, 444, 33, 22, 11]







